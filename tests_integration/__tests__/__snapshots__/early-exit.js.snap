// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`show detailed usage with --help l (alias) (stderr) 1`] = `""`;

exports[`show detailed usage with --help l (alias) (stdout) 1`] = `
"-l, --list-different

  Print the names of files that are different from Prettier's formatting (see also --check).
"
`;

exports[`show detailed usage with --help l (alias) (write) 1`] = `Array []`;

exports[`show detailed usage with plugin options (automatic resolution) (stderr) 1`] = `""`;

exports[`show detailed usage with plugin options (automatic resolution) (stdout) 1`] = `
"--tab-width <int>

  Number of spaces per indentation level.

Default: 2
Plugin defaults:
* prettier-plugin-bar: 4
"
`;

exports[`show detailed usage with plugin options (automatic resolution) (write) 1`] = `Array []`;

exports[`show detailed usage with plugin options (manual resolution) (stderr) 1`] = `""`;

exports[`show detailed usage with plugin options (manual resolution) (stdout) 1`] = `
"--tab-width <int>

  Number of spaces per indentation level.

Default: 2
Plugin defaults:
* ../plugins/automatic/node_modules/prettier-plugin-bar: 4
"
`;

exports[`show detailed usage with plugin options (manual resolution) (write) 1`] = `Array []`;

exports[`show usage with --help (stderr) 1`] = `""`;

exports[`show usage with --help (stdout) 1`] = `
"Usage: prettier [options] [file/glob ...]

By default, output is written to stdout.
Stdin is read if it is piped to Prettier and no files are given.

Output options:

  -c, --check              Check if the given files are formatted, print a human-friendly summary
                           message and paths to unformatted files (see also --list-different).
  -l, --list-different     Print the names of files that are different from Prettier's formatting (see also --check).
  --write                  Edit files in-place. (Beware!)

Format options:

  --arrow-parens <avoid|always>
                           Include parentheses around a sole arrow function parameter.
                           Defaults to avoid.
  --no-bracket-spacing     Do not print spaces between brackets.
  --end-of-line <auto|lf|crlf|cr>
                           Which end of line characters to apply.
                           Defaults to auto.
  --html-whitespace-sensitivity <css|strict|ignore>
                           How to handle whitespaces in HTML.
                           Defaults to css.
  --jsx-bracket-same-line  Put > on the last line instead of at a new line.
                           Defaults to false.
  --jsx-single-quote       Use single quotes in JSX.
                           Defaults to false.
  --parser <flow|babel|babel-flow|typescript|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|html|angular>
                           Which parser to use.
  --print-width <int>      The line length where Prettier will try wrap.
                           Defaults to 80.
  --prose-wrap <always|never|preserve>
                           How to wrap prose.
                           Defaults to preserve.
  --no-semi                Do not print semicolons, except at the beginning of lines which may need them.
  --single-quote           Use single quotes instead of double quotes.
                           Defaults to false.
  --tab-width <int>        Number of spaces per indentation level.
                           Defaults to 2.
  --trailing-comma <none|es5|all>
                           Print trailing commas wherever possible when multi-line.
                           Defaults to none.
  --use-tabs               Indent with tabs instead of spaces.
                           Defaults to false.

Config options:

  --config <path>          Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).
  --no-config              Do not look for a configuration file.
  --config-precedence <cli-override|file-override|prefer-file>
                           Define in which order config files and CLI options should be evaluated.
                           Defaults to cli-override.
  --no-editorconfig        Don't take .editorconfig into account when parsing configuration.
  --find-config-path <path>
                           Find and print the path to a configuration file for the given input file.
  --ignore-path <path>     Path to a file with patterns describing files to ignore.
                           Defaults to .prettierignore.
  --plugin <path>          Add a plugin. Multiple plugins can be passed as separate \`--plugin\`s.
                           Defaults to [].
  --plugin-search-dir <path>
                           Custom directory that contains prettier plugins in node_modules subdirectory.
                           Overrides default behavior when plugins are searched relatively to the location of Prettier.
                           Multiple values are accepted.
                           Defaults to [].
  --with-node-modules      Process files inside 'node_modules' directory.

Editor options:

  --cursor-offset <int>    Print (to stderr) where a cursor at the given position would move to after formatting.
                           This option cannot be used with --range-start and --range-end.
                           Defaults to -1.
  --range-end <int>        Format code ending at a given character offset (exclusive).
                           The range will extend forwards to the end of the selected statement.
                           This option cannot be used with --cursor-offset.
                           Defaults to Infinity.
  --range-start <int>      Format code starting at a given character offset.
                           The range will extend backwards to the start of the first line containing the selected statement.
                           This option cannot be used with --cursor-offset.
                           Defaults to 0.

Other options:

  --no-color               Do not colorize error messages.
  --file-info <path>       Extract the following info (as JSON) for a given file path. Reported fields:
                           * ignored (boolean) - true if file path is filtered by --ignore-path
                           * inferredParser (string | null) - name of parser inferred from file path
  -h, --help <flag>        Show CLI usage, or details about the given flag.
                           Example: --help write
  --insert-pragma          Insert @format pragma into file's first docblock comment.
                           Defaults to false.
  --loglevel <silent|error|warn|log|debug>
                           What level of logs to report.
                           Defaults to log.
  --require-pragma         Require either '@prettier' or '@format' to be present in the file's first docblock comment
                           in order for it to be formatted.
                           Defaults to false.
  --stdin                  Force reading input from stdin.
  --stdin-filepath <path>  Path to the file to pretend that stdin comes from.
  --support-info           Print support information as JSON.
  -v, --version            Print Prettier version.


"
`;

exports[`show usage with --help (write) 1`] = `Array []`;

exports[`show version with --version (stderr) 1`] = `""`;

exports[`show version with --version (write) 1`] = `Array []`;

exports[`show warning with --help not-found (typo) (stderr) 1`] = `
"[warn] Unknown flag \\"parserr\\", did you mean \\"parser\\"?
"
`;

exports[`show warning with --help not-found (typo) (stdout) 1`] = `
"--parser <flow|babel|babel-flow|typescript|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|html|angular>

  Which parser to use.

Valid options:

  flow             Flow
  babel            JavaScript
  babel-flow       Flow
  typescript       TypeScript
  css              CSS
  less             Less
  scss             SCSS
  json             JSON
  json5            JSON5
  json-stringify   JSON.stringify
  graphql          GraphQL
  markdown         Markdown
  mdx              MDX
  vue              Vue
  yaml             YAML
  html             HTML
  angular          Angular
"
`;

exports[`show warning with --help not-found (typo) (write) 1`] = `Array []`;

exports[`throw error and show usage with something unexpected (stderr) 1`] = `""`;

exports[`throw error and show usage with something unexpected (stdout) 1`] = `
"Usage: prettier [options] [file/glob ...]

By default, output is written to stdout.
Stdin is read if it is piped to Prettier and no files are given.

Output options:

  -c, --check              Check if the given files are formatted, print a human-friendly summary
                           message and paths to unformatted files (see also --list-different).
  -l, --list-different     Print the names of files that are different from Prettier's formatting (see also --check).
  --write                  Edit files in-place. (Beware!)

Format options:

  --arrow-parens <avoid|always>
                           Include parentheses around a sole arrow function parameter.
                           Defaults to avoid.
  --no-bracket-spacing     Do not print spaces between brackets.
  --end-of-line <auto|lf|crlf|cr>
                           Which end of line characters to apply.
                           Defaults to auto.
  --html-whitespace-sensitivity <css|strict|ignore>
                           How to handle whitespaces in HTML.
                           Defaults to css.
  --jsx-bracket-same-line  Put > on the last line instead of at a new line.
                           Defaults to false.
  --jsx-single-quote       Use single quotes in JSX.
                           Defaults to false.
  --parser <flow|babel|babel-flow|typescript|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|html|angular>
                           Which parser to use.
  --print-width <int>      The line length where Prettier will try wrap.
                           Defaults to 80.
  --prose-wrap <always|never|preserve>
                           How to wrap prose.
                           Defaults to preserve.
  --no-semi                Do not print semicolons, except at the beginning of lines which may need them.
  --single-quote           Use single quotes instead of double quotes.
                           Defaults to false.
  --tab-width <int>        Number of spaces per indentation level.
                           Defaults to 2.
  --trailing-comma <none|es5|all>
                           Print trailing commas wherever possible when multi-line.
                           Defaults to none.
  --use-tabs               Indent with tabs instead of spaces.
                           Defaults to false.

Config options:

  --config <path>          Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js).
  --no-config              Do not look for a configuration file.
  --config-precedence <cli-override|file-override|prefer-file>
                           Define in which order config files and CLI options should be evaluated.
                           Defaults to cli-override.
  --no-editorconfig        Don't take .editorconfig into account when parsing configuration.
  --find-config-path <path>
                           Find and print the path to a configuration file for the given input file.
  --ignore-path <path>     Path to a file with patterns describing files to ignore.
                           Defaults to .prettierignore.
  --plugin <path>          Add a plugin. Multiple plugins can be passed as separate \`--plugin\`s.
                           Defaults to [].
  --plugin-search-dir <path>
                           Custom directory that contains prettier plugins in node_modules subdirectory.
                           Overrides default behavior when plugins are searched relatively to the location of Prettier.
                           Multiple values are accepted.
                           Defaults to [].
  --with-node-modules      Process files inside 'node_modules' directory.

Editor options:

  --cursor-offset <int>    Print (to stderr) where a cursor at the given position would move to after formatting.
                           This option cannot be used with --range-start and --range-end.
                           Defaults to -1.
  --range-end <int>        Format code ending at a given character offset (exclusive).
                           The range will extend forwards to the end of the selected statement.
                           This option cannot be used with --cursor-offset.
                           Defaults to Infinity.
  --range-start <int>      Format code starting at a given character offset.
                           The range will extend backwards to the start of the first line containing the selected statement.
                           This option cannot be used with --cursor-offset.
                           Defaults to 0.

Other options:

  --no-color               Do not colorize error messages.
  --file-info <path>       Extract the following info (as JSON) for a given file path. Reported fields:
                           * ignored (boolean) - true if file path is filtered by --ignore-path
                           * inferredParser (string | null) - name of parser inferred from file path
  -h, --help <flag>        Show CLI usage, or details about the given flag.
                           Example: --help write
  --insert-pragma          Insert @format pragma into file's first docblock comment.
                           Defaults to false.
  --loglevel <silent|error|warn|log|debug>
                           What level of logs to report.
                           Defaults to log.
  --require-pragma         Require either '@prettier' or '@format' to be present in the file's first docblock comment
                           in order for it to be formatted.
                           Defaults to false.
  --stdin                  Force reading input from stdin.
  --stdin-filepath <path>  Path to the file to pretend that stdin comes from.
  --support-info           Print support information as JSON.
  -v, --version            Print Prettier version.


"
`;

exports[`throw error and show usage with something unexpected (write) 1`] = `Array []`;

exports[`throw error with --check + --list-different (stderr) 1`] = `
"[error] Cannot use --check and --list-different together.
"
`;

exports[`throw error with --check + --list-different (stdout) 1`] = `""`;

exports[`throw error with --check + --list-different (write) 1`] = `Array []`;

exports[`throw error with --file-info + multiple files (stderr) 1`] = `
"[error] Cannot use --file-info with multiple files
"
`;

exports[`throw error with --file-info + multiple files (stdout) 1`] = `""`;

exports[`throw error with --file-info + multiple files (write) 1`] = `Array []`;

exports[`throw error with --find-config-path + multiple files (stderr) 1`] = `
"[error] Cannot use --find-config-path with multiple files
"
`;

exports[`throw error with --find-config-path + multiple files (stdout) 1`] = `""`;

exports[`throw error with --find-config-path + multiple files (write) 1`] = `Array []`;

exports[`throw error with --help not-found (stderr) 1`] = `
"[error] Invalid --help value. Expected a flag, but received \\"not-found\\".
"
`;

exports[`throw error with --help not-found (stdout) 1`] = `""`;

exports[`throw error with --help not-found (write) 1`] = `Array []`;

exports[`throw error with --write + --debug-check (stderr) 1`] = `
"[error] Cannot use --write and --debug-check together.
"
`;

exports[`throw error with --write + --debug-check (stdout) 1`] = `""`;

exports[`throw error with --write + --debug-check (write) 1`] = `Array []`;
