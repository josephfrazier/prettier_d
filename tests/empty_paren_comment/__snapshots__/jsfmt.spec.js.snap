// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class.js 1`] = `
====================================options=====================================
parsers: ["flow", "babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class x {
  /**
  * Set of default settings to be applied to model fetch calls in DAO layer.
  */
  static get defaultSettings() {
  }
}

=====================================output=====================================
class x {
  /**
   * Set of default settings to be applied to model fetch calls in DAO layer.
   */
  static get defaultSettings() {}
}

================================================================================
`;

exports[`empty_paren_comment.js 1`] = `
====================================options=====================================
parsers: ["flow", "babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
let f = (/* ... */) => {}
(function (/* ... */) {})(/* ... */)
function f(/* ... */) {}

const obj = {
  f(/* ... */) {},
  f: (/* ... */) => {},
  f: function(/* ... */) {},
  f: function f(/* ... */) {}
}

class Foo {
  f(/* ... */) {}
  f() /* ... */ {}
  f = (/* ... */) => {};
  static f(/* ... */) {};
  static f = (/* ... */) => {};
  static f = function(/* ... */) {};
  static f = function f(/* ... */) {};
}

f(/* ... */);
f(a, /* ... */);
f(a, /* ... */ b);
f(/* ... */ a, b);

let f = () => import(a /* ... */);
let f = () => doThing(a, /* ... */ b);

=====================================output=====================================
let f = (/* ... */) => {};
(function(/* ... */) {})(/* ... */);
function f(/* ... */) {}

const obj = {
  f(/* ... */) {},
  f: (/* ... */) => {},
  f: function(/* ... */) {},
  f: function f(/* ... */) {}
};

class Foo {
  f(/* ... */) {}
  f() /* ... */ {}
  f = (/* ... */) => {};
  static f(/* ... */) {}
  static f = (/* ... */) => {};
  static f = function(/* ... */) {};
  static f = function f(/* ... */) {};
}

f(/* ... */);
f(a /* ... */);
f(a, /* ... */ b);
f(/* ... */ a, b);

let f = () => import(a /* ... */);
let f = () => doThing(a, /* ... */ b);

================================================================================
`;
