// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async-iteration.js 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================

async function * a() {
    yield* b();
}

class X {
    async * b() {
        yield* a();
    }
}

=====================================output=====================================
async function* a() {
  yield* b();
}

class X {
  async *b() {
    yield* a();
  }
}

================================================================================
`;

exports[`await_parse.js 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
async function f1() { (await f()).length }
async function g() {
  invariant(
    (await driver.navigator.getUrl()).substr(-7)
  );
}
function *f2(){
  !(yield a);
}
async function f3() {
  a = !await f();
}
async () => {
  new A(await x);
  obj[await x];
}

=====================================output=====================================
async function f1() {
  (await f()).length;
}
async function g() {
  invariant((await driver.navigator.getUrl()).substr(-7));
}
function* f2() {
  !(yield a);
}
async function f3() {
  a = !(await f());
}
async () => {
  new A(await x);
  obj[await x];
};

================================================================================
`;

exports[`conditional-expression.js 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
async function f() {
  const result = typeof fn === 'function' ? await fn() : null;
}

(async function() {
  console.log(
    await (true ? Promise.resolve("A") : Promise.resolve("B"))
  );
})()

async function f2() {
  await (spellcheck && spellcheck.setChecking(false));
  await spellcheck && spellcheck.setChecking(false)
}

=====================================output=====================================
async function f() {
  const result = typeof fn === "function" ? await fn() : null;
}

(async function() {
  console.log(await (true ? Promise.resolve("A") : Promise.resolve("B")));
})();

async function f2() {
  await (spellcheck && spellcheck.setChecking(false));
  (await spellcheck) && spellcheck.setChecking(false);
}

================================================================================
`;

exports[`inline_await.js 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
async function f() {
  const admins = (await(db.select('*').from('admins').leftJoin('bla').where('id', 'in', [1,2,3,4]))).map(({id, name})=>({id, name}))
}

=====================================output=====================================
async function f() {
  const admins = (
    await db
      .select("*")
      .from("admins")
      .leftJoin("bla")
      .where("id", "in", [1, 2, 3, 4])
  ).map(({ id, name }) => ({ id, name }));
}

================================================================================
`;

exports[`parens.js 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
async function *f(){ await (yield x); }

async function f2(){ await (() => {}); }

=====================================output=====================================
async function* f() {
  await (yield x);
}

async function f2() {
  await (() => {});
}

================================================================================
`;
