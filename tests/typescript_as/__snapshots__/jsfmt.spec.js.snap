// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`as.js 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const name = (description as DescriptionObject).name || (description as string);
this.isTabActionBar((e.target || e.srcElement) as HTMLElement);
(originalError ? wrappedError(errMsg, originalError) : Error(errMsg)) as InjectionError;
'current' in (props.pagination as Object)
start + (yearSelectTotal as number)
scrollTop > (visibilityHeight as number)
export default class Column<T> extends (RcTable.Column as React.ComponentClass<ColumnProps<T>,ColumnProps<T>,ColumnProps<T>,ColumnProps<T>>) {}
export const MobxTypedForm = class extends (Form as { new (): any }) {}
export abstract class MobxTypedForm1 extends (Form as { new (): any }) {}
({}) as {};
function*g() {
  const test = (yield 'foo') as number;
}
async function g1() {
  const test = (await 'foo') as number;
}
({}) as X;
() => ({}) as X;
const state = JSON.stringify({
  next: window.location.href,
  nonce,
} as State);

(foo.bar as Baz) = [bar];
(foo.bar as any)++;

(bValue as boolean) ? 0 : -1;
<boolean>bValue ? 0 : -1;


=====================================output=====================================
const name = (description as DescriptionObject).name || (description as string);
this.isTabActionBar((e.target || e.srcElement) as HTMLElement);
(originalError
  ? wrappedError(errMsg, originalError)
  : Error(errMsg)) as InjectionError;
"current" in (props.pagination as Object);
start + (yearSelectTotal as number);
scrollTop > (visibilityHeight as number);
export default class Column<T> extends (RcTable.Column as React.ComponentClass<
  ColumnProps<T>,
  ColumnProps<T>,
  ColumnProps<T>,
  ColumnProps<T>
>) {}
export const MobxTypedForm = class extends (Form as { new (): any }) {};
export abstract class MobxTypedForm1 extends (Form as { new (): any }) {}
({} as {});
function* g() {
  const test = (yield "foo") as number;
}
async function g1() {
  const test = (await "foo") as number;
}
({} as X);
() => ({} as X);
const state = JSON.stringify({
  next: window.location.href,
  nonce
} as State);

(foo.bar as Baz) = [bar];
(foo.bar as any)++;

(bValue as boolean) ? 0 : -1;
<boolean>bValue ? 0 : -1;

================================================================================
`;

exports[`export_default_as.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default (function log() {} as typeof console.log)

=====================================output=====================================
export default (function log() {} as typeof console.log);

================================================================================
`;
