// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`await.js - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
const doBothThings = async () => {
    const request = doAsyncThing();
    return (await request)::doSyncThing();
};

=====================================output=====================================
const doBothThings = async () => {
  const request = doAsyncThing()
  return (await request)::doSyncThing()
}

================================================================================
`;

exports[`await.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const doBothThings = async () => {
    const request = doAsyncThing();
    return (await request)::doSyncThing();
};

=====================================output=====================================
const doBothThings = async () => {
  const request = doAsyncThing();
  return (await request)::doSyncThing();
};

================================================================================
`;

exports[`bind_parens.js - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
(a || b)::c;
a || (b::c);
::obj.prop;
(void 0)::func();
(+0)::is(-0);
a::(b.c);
a::(b.c());
a::b.c();
a::(b.c()());
a::((b.c())());
a::(b.c())();
a::(b.c().d);
a::(c().d.e);
a::(b());
a::(b::c());
a::(b()::c);
a::(b().c::d);
a::(b.c::d);
a::(b::c.d);
a::(b.c::d::e);
a::(b::c::d);
a::(b::c::d.e);
a::((b::c::d).e);
a::(void 0);
a::(b.c()::d.e);
a::(b.c::d.e);
a::(b.c::d.e)::f.g;
b.c::d.e;
(b.c::d).e;
(b::c::d).e;
new (a::b)();
new f(a::b);
f[a::b];
f[a::b()];

=====================================output=====================================
;(a || b)::c
a || b::c
;::obj.prop
;(void 0)::func()
;(+0)::is(-0)
a::b.c
a::(b.c())
a::b.c()
a::(b.c()())
a::(b.c()())
a::(b.c())()
a::(b.c().d)
a::(c().d.e)
a::(b())
a::(b::c())
a::(b()::c)
a::(b().c::d)
a::(b.c::d)
a::(b::c.d)
a::(b.c::d::e)
a::(b::c::d)
a::(b::c::d.e)
a::(b::c::d).e
a::(void 0)
a::(b.c()::d.e)
a::(b.c::d.e)
a::(b.c::d.e)::f.g
b.c::d.e
;(b.c::d).e
;(b::c::d).e
new (a::b)()
new f(a::b)
f[a::b]
f[a::b()]

================================================================================
`;

exports[`bind_parens.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(a || b)::c;
a || (b::c);
::obj.prop;
(void 0)::func();
(+0)::is(-0);
a::(b.c);
a::(b.c());
a::b.c();
a::(b.c()());
a::((b.c())());
a::(b.c())();
a::(b.c().d);
a::(c().d.e);
a::(b());
a::(b::c());
a::(b()::c);
a::(b().c::d);
a::(b.c::d);
a::(b::c.d);
a::(b.c::d::e);
a::(b::c::d);
a::(b::c::d.e);
a::((b::c::d).e);
a::(void 0);
a::(b.c()::d.e);
a::(b.c::d.e);
a::(b.c::d.e)::f.g;
b.c::d.e;
(b.c::d).e;
(b::c::d).e;
new (a::b)();
new f(a::b);
f[a::b];
f[a::b()];

=====================================output=====================================
(a || b)::c;
a || b::c;
::obj.prop;
(void 0)::func();
(+0)::is(-0);
a::b.c;
a::(b.c());
a::b.c();
a::(b.c()());
a::(b.c()());
a::(b.c())();
a::(b.c().d);
a::(c().d.e);
a::(b());
a::(b::c());
a::(b()::c);
a::(b().c::d);
a::(b.c::d);
a::(b::c.d);
a::(b.c::d::e);
a::(b::c::d);
a::(b::c::d.e);
a::(b::c::d).e;
a::(void 0);
a::(b.c()::d.e);
a::(b.c::d.e);
a::(b.c::d.e)::f.g;
b.c::d.e;
(b.c::d).e;
(b::c::d).e;
new (a::b)();
new f(a::b);
f[a::b];
f[a::b()];

================================================================================
`;

exports[`long_name_method.js - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
class X {
  constructor() {
    this.testLongNameMethodAndSomethingElseLallala = ::this.testLongNameMethodAndSomethingElseLallala;
  }
  
  testLongNameMethodAndSomethingElseLallala() {
    return true;
  }
}
=====================================output=====================================
class X {
  constructor() {
    this.testLongNameMethodAndSomethingElseLallala =
      ::this.testLongNameMethodAndSomethingElseLallala
  }

  testLongNameMethodAndSomethingElseLallala() {
    return true
  }
}

================================================================================
`;

exports[`long_name_method.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class X {
  constructor() {
    this.testLongNameMethodAndSomethingElseLallala = ::this.testLongNameMethodAndSomethingElseLallala;
  }
  
  testLongNameMethodAndSomethingElseLallala() {
    return true;
  }
}
=====================================output=====================================
class X {
  constructor() {
    this.testLongNameMethodAndSomethingElseLallala =
      ::this.testLongNameMethodAndSomethingElseLallala;
  }

  testLongNameMethodAndSomethingElseLallala() {
    return true;
  }
}

================================================================================
`;

exports[`method_chain.js - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
import {interval} from 'rxjs/observable/interval';
import {filter} from 'rxjs/operator/filter';
import {take} from 'rxjs/operator/take';
import {map} from 'rxjs/operator/map';
import {throttle} from 'rxjs/operator/throttle';
import {takeUntil} from 'rxjs/operator/takeUntil';

function test(observable) {
    return observable
        ::filter(data => data.someTest)
        ::throttle(() =>
            interval(10)
                ::take(1)
                ::takeUntil(observable::filter(data => someOtherTest))
        )
        ::map(someFunction);
}

=====================================output=====================================
import { interval } from "rxjs/observable/interval"
import { filter } from "rxjs/operator/filter"
import { take } from "rxjs/operator/take"
import { map } from "rxjs/operator/map"
import { throttle } from "rxjs/operator/throttle"
import { takeUntil } from "rxjs/operator/takeUntil"

function test(observable) {
  return observable
    ::filter((data) => data.someTest)
    ::throttle(() =>
      interval(10)
        ::take(1)
        ::takeUntil(observable::filter((data) => someOtherTest))
    )
    ::map(someFunction)
}

================================================================================
`;

exports[`method_chain.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
import {interval} from 'rxjs/observable/interval';
import {filter} from 'rxjs/operator/filter';
import {take} from 'rxjs/operator/take';
import {map} from 'rxjs/operator/map';
import {throttle} from 'rxjs/operator/throttle';
import {takeUntil} from 'rxjs/operator/takeUntil';

function test(observable) {
    return observable
        ::filter(data => data.someTest)
        ::throttle(() =>
            interval(10)
                ::take(1)
                ::takeUntil(observable::filter(data => someOtherTest))
        )
        ::map(someFunction);
}

=====================================output=====================================
import { interval } from "rxjs/observable/interval";
import { filter } from "rxjs/operator/filter";
import { take } from "rxjs/operator/take";
import { map } from "rxjs/operator/map";
import { throttle } from "rxjs/operator/throttle";
import { takeUntil } from "rxjs/operator/takeUntil";

function test(observable) {
  return observable
    ::filter((data) => data.someTest)
    ::throttle(() =>
      interval(10)
        ::take(1)
        ::takeUntil(observable::filter((data) => someOtherTest))
    )
    ::map(someFunction);
}

================================================================================
`;

exports[`short_name_method.js - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
class X {
  constructor() {
    this.shortMethod = ::this.shortMethod;
  }
  
  shortMethod() {
    return true;
  }
}
=====================================output=====================================
class X {
  constructor() {
    this.shortMethod = ::this.shortMethod
  }

  shortMethod() {
    return true
  }
}

================================================================================
`;

exports[`short_name_method.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
class X {
  constructor() {
    this.shortMethod = ::this.shortMethod;
  }
  
  shortMethod() {
    return true;
  }
}
=====================================output=====================================
class X {
  constructor() {
    this.shortMethod = ::this.shortMethod;
  }

  shortMethod() {
    return true;
  }
}

================================================================================
`;

exports[`unary.js - {"semi":false} format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
semi: false
                                                                                | printWidth
=====================================input======================================
!x::y;
!(x::y /* foo */);
!(/* foo */ x::y);
!(
  /* foo */
  x::y
);
!(
  x::y
  /* foo */
);
!(
  x::y // foo
);

=====================================output=====================================
!x::y
!(x::y /* foo */)
!(/* foo */ x::y)
!(
  /* foo */
  x::y
)
!(
  x::y
  /* foo */
)
!(
  x::y // foo
)

================================================================================
`;

exports[`unary.js format 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
!x::y;
!(x::y /* foo */);
!(/* foo */ x::y);
!(
  /* foo */
  x::y
);
!(
  x::y
  /* foo */
);
!(
  x::y // foo
);

=====================================output=====================================
!x::y;
!(x::y /* foo */);
!(/* foo */ x::y);
!(
  /* foo */
  x::y
);
!(
  x::y
  /* foo */
);
!(
  x::y // foo
);

================================================================================
`;
